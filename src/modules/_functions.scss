
@mixin createFluidSpacing($prefix, $property) {
    @each $size in $spaceSizes{
        .#{$prefix}-#{$size}{
            #{$property}:var(--space-#{$size});
        }
    }
}
//in rem value
@mixin createFixedSpacing($prefix, $property, $version, $device:"") {
    @if $version == "general" {
        //General version. Create rules like .ma-1.4
        .#{$prefix}-0#{$device} {
            #{$property}: 0 !important;
        }

        @each $value in $spacingValues{
            $part1: str-slice($value, 1, 1); //when $value = '0.50', it returns '0'
            $part2: str-slice($value, 3, 4) ; //when $value = '0.50', it returns '50'
            .#{$prefix}-#{$part1}\.#{$part2}#{$device}{
                #{$property}:#{$value} + 'rem'; 
            }
        }
    } @else {
        //Compact version. Create rules like .ma14
        .#{$prefix}0#{$device} {
            #{$property}: 0 !important;
        }

        @each $value in $spacingValues{
            $part1: str-slice($value, 1, 1); //when $value = '0.50', it returns '0'
            $part2: str-slice($value, 3, 4) ; //when $value = '0.50', it returns '50'
            .#{$prefix}#{$part1}#{$part2}#{$device}{
                #{$property}:#{$value} + 'rem'; 
            }
        }
    }
}

//values in rem
@mixin create-both-spacing($prefix, $property1, $property2, $version, $device:"") {

    @if $version == "general" {
        .#{$prefix}-0#{$device} {
            #{$property1}: 0 !important;
            #{$property2}: 0 !important;
        }

        @each $value in $spacingValues{
            $part1: str-slice($value, 1, 1); //when $value = '0.50', it returns '0'
            $part2: str-slice($value, 3, 4) ; //when $value = '0.50', it returns '50'
            .#{$prefix}-#{$part1}\.#{$part2}#{$device}{
                #{$property1}: #{$value} + 'rem' !important;
                #{$property2}: #{$value} + 'rem' !important;
            }
        }

    } @else {
        .#{$prefix}0#{$device} {
            #{$property1}: 0 !important;
            #{$property2}: 0 !important;
        }

        @each $value in $spacingValues{
            $part1: str-slice($value, 1, 1); //when $value = '0.50', it returns '0'
            $part2: str-slice($value, 3, 4) ; //when $value = '0.50', it returns '50'
            .#{$prefix}#{$part1}#{$part2}#{$device}{
                #{$property1}: #{$value} + 'rem' !important;
                #{$property2}: #{$value} + 'rem' !important;
            }
        }
    }
}

//Creating fluid font sizes
@mixin createFontSizes($prefix, $property, ) {
    @each $size in $fontSizes{
        .#{$prefix}-#{$size}{
            #{$property}:var(--fs-#{$size});
        }
    }
}


@mixin createFontWeights($prefix, $property, ) {
    @each $value in $fontWeights{
        .#{$prefix}-#{$value}{
            #{$property}:#{$value}; 
        }
    }
}

// Here's a general way to escape decimal numbers for class names (replacing . with -)   ----->
@function strip-units ( $number ) {
    @return $number / ( $number * 0 + 1 );
}

@function replace-decimal( $value ) {
    @if type-of( $value ) != 'number' {
        @return $value;
    }
    $int: floor( strip-units( $value ) );
    $fract: $value - $int;
    @if ( $fract == 0 ) {
        @return $int;
    }
    @while ( $fract != floor( $fract ) ) {
        $fract: $fract * 10;
    }
    @return $int + '-' + $fract;
}
@function remove-decimal( $value ) {
    @if type-of( $value ) != 'number' {
        @return $value;
    }
    $int: floor( strip-units( $value ) );
    $fract: $value - $int;
    @if ( $fract == 0 ) {
        @return $int;
    }
    @while ( $fract != floor( $fract ) ) {
        $fract: $fract * 10;
    }
    @return $int + '' + $fract;
}
//<------ Here's a general way to escape decimal numbers for class names (replacing . with -)

@function str-replace($string, $search, $replace: '') {
    $index: str-index($string, $search);
    
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
    }
    
    @return $string;
  }