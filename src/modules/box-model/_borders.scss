.b{
    &a{
        border-width: 1px;
        border-style: solid;
    }
    &t{
        border-top-width: 1px;
        border-top-style: solid;
    }
    &b{
        border-bottom-width: 1px;
        border-bottom-style: solid;
    }
    &l{
        border-left-width: 1px;
        border-left-style: solid;
    }
    &r{
        border-right-width: 1px;
        border-right-style: solid;
    }

    &h{
        border-top-width: 1px;
        border-top-style: solid;
        border-bottom-width: 1px;
        border-bottom-style: solid;
    }
    &v{
        border-left-width: 1px;
        border-left-style: solid;
        border-right-width: 1px;
        border-right-style: solid;
    }  
}

.solid{
    border-style: solid !important;
}
.dash{
    border-style: dashed !important;
}
.dot{
    border-style: dotted !important;
}

.round{
    border-radius: var(--border-radius);
}

$px-values: '1' '2' '3' '4' '5' '6' '7' '8' '9' '10';
@mixin create-border-radius-in-px($prefix, $property, $version, $device:"") {
    @if $version == "general" {
        @each $value in $px-values{
            .#{$prefix}-#{$value}#{$device}{
                #{$property}:#{$value} + 'px !important';
            }
        }
    } @else {
        //Compact version. Create rules like .ma14
        @each $value in $px-values{
            .#{$prefix}#{$value}#{$device}{
                #{$property}:#{$value} + 'px !important';
            }
        }
    }
}

@include create-border-radius-in-px("br", "border-radius", "general", "");
@include create-border-radius-in-px("br", "border-radius", "compact", "");

$rem-values: '0.1' '0.2' '0.3' '0.4' '0.5' '0.6' '0.7' '0.8' '0.9' '1.0' '1.1' '1.2' '1.3' '1.4' '1.5' '1.6' '1.7' '1.8' '1.9' '2.0' '2.1' '2.2' '2.3' '2.4' '2.5' '2.6' '2.7' '2.8' '2.9' '3.0' '3.1' '3.2' '3.3' '3.4' '3.5' '3.6' '3.7' '3.8' '3.9' '4.0';

@mixin create-border-radius-in-rem($prefix, $property, $version, $device:"") {
    @if $version == "general" {
        @each $value in $rem-values{
            $part1: str-slice($value, 1, 1); //when $value = '0.50', it returns '0'
            $part2: str-slice($value, 3, 4) ; //when $value = '0.50', it returns '50'
            .#{$prefix}-#{$part1}\.#{$part2}#{$device}{
                #{$property}:#{$value} + 'rem !important';
            }
        }
    } @else {
        @each $value in $rem-values{
            $part1: str-slice($value, 1, 1); //when $value = '0.50', it returns '0'
            $part2: str-slice($value, 3, 4) ; //when $value = '0.50', it returns '50'
            .#{$prefix}#{$part1}#{$part2}#{$device}{
                #{$property}:#{$value} + 'rem !important';
            }
        }
    }
}


@include create-border-radius-in-rem("br", "border-radius", "general", "");
@include create-border-radius-in-rem("br", "border-radius", "compact", "");