/* ====================================================
   Grid
==================================================== */
.grid{
    display: grid;
    gap: var(--space-md);
    grid-template-columns: repeat(1, 1fr);

    &.dense{
        grid-auto-flow: dense; /* [2] */
    }

    @include lg{
        grid-template-columns: repeat(12, 1fr);
    }

    @for $i from 1 through 12 {
        &.fr#{$i}{
            grid-template-columns: repeat(#{$i}, 1fr) !important;
        }
    }

    @include sm{
        @for $i from 1 through 12 {
            &.fr#{$i}-sm{
                grid-template-columns: repeat(#{$i}, 1fr) !important;
            }
        }
    }

    @include lg{
        @for $i from 1 through 12 {
            &.fr#{$i}-lg{
                grid-template-columns: repeat(#{$i}, 1fr) !important;
            }
        }
    }

    //A grid with unknown fractions 
    &.auto{

        --grid-column-count: 12;  //default 6 cols.
        @include sm{
            &.max1-sm{
                --grid-column-count: 1;
            }
            &.max2-sm{
                --grid-column-count: 2;
            }
            &.max3-sm{
                --grid-column-count: 3;
            }
            &.max4-sm{
                --grid-column-count: 4;
            }
            &.max5-sm{
                --grid-column-count: 5;
            }
            &.max6-sm{
                --grid-column-count: 6;
            }
            &.max7-sm{
                --grid-column-count: 7;
            }
            &.max8-sm{
                --grid-column-count: 8;
            }
            &.max9-sm{
                --grid-column-count: 9;
            }
            &.max10-sm{
                --grid-column-count: 10;
            }
            &.max11-sm{
                --grid-column-count: 11;
            }
            &.max12-sm{
                --grid-column-count: 12;
            }
        }
        
        @include lg{
            &.max1-lg{
                --grid-column-count: 1;
            }
            &.max2-lg{
                --grid-column-count: 2;
            }
            &.max3-lg{
                --grid-column-count: 3;
            }
            &.max4-lg{
                --grid-column-count: 4;
            }
            &.max5-lg{
                --grid-column-count: 5;
            }
            &.max6-lg{
                --grid-column-count: 6;
            }
            &.max7-lg{
                --grid-column-count: 7;
            }
            &.max8-lg{
                --grid-column-count: 8;
            }
            &.max9-lg{
                --grid-column-count: 9;
            }
            &.max10-lg{
                --grid-column-count: 10;
            }
            &.max11-lg{
                --grid-column-count: 11;
            }
            &.max12-lg{
                --grid-column-count: 12;
            }
        }

        --grid-item--min-width: 100px;
        --gap-count: calc(var(--grid-column-count) - 1);
        --total-gap-width: calc(var(--gap-count) * var(--space-md));
        --grid-item--max-width: calc((100% - var(--total-gap-width)) / var(--grid-column-count));

        display: grid;

        // grid-template-columns: repeat(auto-fill, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));
        grid-template-columns: repeat(auto-fit, minmax(max(var(--grid-item--min-width), var(--grid-item--max-width)), 1fr));

        // grid-auto-flow: row dense;
        grid-gap: var(--space-md);
    }
}



/* ====================================================
   Grid Child
==================================================== */

//https://learncssgrid.com/

// An Auto-Filling CSS Grid With Max Columns of a Minimum Size
// https://css-tricks.com/an-auto-filling-css-grid-with-max-columns/


.grid{
    &>.fullwidth {
        grid-column: 1 / -1;
    }

    @for $i from 1 through 12 {
        &>.fr#{$i} {
            grid-column-end: span #{$i};
        }

        @include sm{
            &>.fr#{$i}-sm {
                grid-column-end: span #{$i};
            }
        }

        @include lg{
            &>.fr#{$i}-lg {
                grid-column-end: span #{$i};
            }
        }
    }
}
//<--------------grid column width//

//grid column start position ------------>
.grid {
    //from1 - from12
    @for $i from 1 through 12 {
        &>.from#{$i} {
            grid-column-start: #{$i};
        }

        @include sm{
            &>.from#{$i}-sm {
                grid-column-start: #{$i};
            }
        }

        @include lg{
            &>.from#{$i}-lg {
                grid-column-start: #{$i};
            }
        }
    }
}
//<--------------grid column start position//